# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/http-accept/all/http-accept.rbi
#
# http-accept-1.7.0

module HTTP
end
module HTTP::Accept
end
class HTTP::Accept::ParseError < ArgumentError
end
module HTTP::Accept::QuotedString
  def self.quote(value, force = nil); end
  def self.unquote(value, normalize_whitespace = nil); end
end
module HTTP::Accept::Sort
  def self.by_quality_factor(items); end
end
module HTTP::Accept::MediaTypes
  def self.browser_preferred_media_types(env); end
  def self.parse(text, normalize_whitespace = nil); end
end
class HTTP::Accept::MediaTypes::Map
  def <<(object); end
  def [](media_range); end
  def []=(media_range, object); end
  def for(media_types); end
  def freeze; end
  def initialize; end
end
class HTTP::Accept::MediaTypes::MediaRange < Struct
  def ===(other); end
  def mime_type; end
  def mime_type=(_); end
  def parameters; end
  def parameters=(_); end
  def parameters_string; end
  def quality_factor; end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def self.parse(scanner, normalize_whitespace = nil); end
  def self.parse_parameters(scanner, normalize_whitespace); end
  def split(on = nil, count = nil); end
  def to_s; end
  def to_str; end
end
class HTTP::Accept::ContentType < HTTP::Accept::MediaTypes::MediaRange
  def initialize(mime_type, parameters = nil); end
end
module HTTP::Accept::Encodings
  def self.browser_preferred_content_codings(env); end
  def self.parse(text); end
end
class HTTP::Accept::Encodings::ContentCoding < Struct
  def encoding; end
  def encoding=(_); end
  def q; end
  def q=(_); end
  def quality_factor; end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def self.parse(scanner); end
end
module HTTP::Accept::Languages
  def self.parse(text); end
end
class HTTP::Accept::Languages::Locales
  def &(languages); end
  def +(others); end
  def each(&block); end
  def freeze; end
  def include?(locale_name); end
  def initialize(names); end
  def join(*args); end
  def names; end
  def patterns; end
  def self.expand(locale, into); end
  def to_a; end
end
class HTTP::Accept::Languages::LanguageRange < Struct
  def locale; end
  def locale=(_); end
  def q; end
  def q=(_); end
  def quality_factor; end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def self.parse(scanner); end
end
